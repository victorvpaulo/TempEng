import argparse
import os
import sys
from pathlib import Path

from compiler import compile_template


def exit_on_arg_error(errormsg):
    print(errormsg)
    parser.print_usage()
    sys.exit(1)


def valid_file_path(path):
    return os.path.isfile(path)


def placeholder_for_execution(template_path, context_path,
                              execute_output_path):
    print(template_path)
    print(context_path)
    print(execute_output_path)


parser = argparse.ArgumentParser(
    description="A simple Template Engine based on compilation."
                " Can receive a textual static template file and compile it,"
                " or execute a compiled template along with a data context to"
                " generate files with dynamic data.")
parser.add_argument("-c", "--compile", type=str,
                    metavar="<file path>",
                    help=" Creates a template from a static file.")
parser.add_argument("-co", "--compileoutput", type=str,
                    metavar="<file path>",
                    help=" Defines the output path for the compiled template."
                         " If not provided, the output will be sent to"
                         " <static template file path>.py")

parser.add_argument("-e", "--execute", default=False, action="store_true",
                    help=" Executes a compiled template, pluging dynamic data"
                         " from a context. Requires a context argument and a"
                         " template. By default executes the template"
                         " generated by the compile action will be used."
                         " However, if the  --compile argument is not passed"
                         " along with --execution"
                         " a --template argument must be passed.")

parser.add_argument("-t", "--template", type=str, metavar="<file path>",
                    help="Compiled template file path for execution."
                         " Must be passed when --compile argument is"
                         " not passed along --execute argument.")

parser.add_argument("-d", "--context", type=str, metavar="<file path>",
                    help=" Context file path for the execution of a template."
                         " The context file provides the data to be pluged"
                         " into the  template. Must be a json file.")

parser.add_argument("-eo", "--executeoutput", type=str,
                    metavar="<directory path>",
                    help=" Directory path to store the output of the execution"
                         " operation. If not provided, the directory where the"
                         " program is located will be used.")
args = parser.parse_args()

args_received = len(sys.argv)
if args_received < 2:
    exit_on_arg_error("ERROR - Invalid number of arguments.\n"
                      "\tThis program requires at least 1 argument.")

if args.compile is None and not args.execute:
    exit_on_arg_error(
        "ERROR - Either a compile or execute argument must be passed.\n")

static_template_path = None
compile_output_path = None
if args.compile is not None:
    static_template_path = Path(args.compile)
    if not valid_file_path(static_template_path):
        exit_on_arg_error("ERROR - Invalid path for static template file"
                          " (--compile).")
    if args.compileoutput is not None:
        compile_output_path = Path(
            args.compileoutput.replace(".py", "") + ".py")
        if not valid_file_path(args.compileoutput):
            exit_on_arg_error("ERROR - Invalid path for compilation output"
                              " file (--compileoutput) .")
    else:
        compile_output_path = Path(str(static_template_path) + ".py")
    compile_template(static_template_path, compile_output_path)
if args.execute:
    template_path = None
    if compile_output_path is None:
        if args.template is None:
            exit_on_arg_error("ERROR - Template argument must be passed when"
                              " execution does not occur along with"
                              " compilation."
                              " be executed (--template).")
        template_path = Path(args.template)
        if not valid_file_path(template_path):
            exit_on_arg_error("ERROR - Invalid path for the template to"
                              " be executed (--template).")
    else:
        template_path = compile_output_path
    if args.context is None:
        exit_on_arg_error("ERROR - Template execution requires a data context"
                          " (--context)")
    context_path = Path(args.context)
    if not valid_file_path(context_path):
        exit_on_arg_error("ERROR - Invalid path for data context"
                          " (--context).")
    execute_output_path = ""
    if args.executeoutput is not None:
        execute_output_path = Path(args.executeoutput)
        if valid_file_path(execute_output_path):
            exit_on_arg_error("ERROR - Directory path for execution output"
                              " is a file path (--executeoutput).")

        placeholder_for_execution(template_path, context_path,
                                  execute_output_path)
